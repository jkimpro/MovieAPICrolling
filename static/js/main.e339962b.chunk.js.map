{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","App","state","movies","isLoading","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oUAgCeA,MA5Bf,YAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OAAQ,yBAAKC,UAAY,SACjB,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IAEzC,yBAAKI,UAAY,eACb,wBAAIA,UAAY,gBAAgBJ,GAChC,wBAAII,UAAY,eAAeL,GAC/B,wBAAIK,UAAY,UACfD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,wBAAIC,IAAMD,EAAOL,UAAU,iBAC1BI,OAGL,uBAAGJ,UAAY,iBAAiBH,MC2D7BU,G,iNAhEXC,MAAQ,CACJC,OAAQ,GACRC,WAAW,G,EAGfC,U,sBAAY,8BAAAC,EAAA,sEAOEC,IAAMC,IAAI,4DAPZ,gBAIIL,EAJJ,EAEJM,KACIA,KACIN,OAOZ,EAAKO,SAAS,CAACP,SAAQC,WAAW,IAX1B,2C,mFAyBRO,KAAKN,c,+BAKA,IAAD,EACwBM,KAAKT,MAA1BE,EADH,EACGA,UAAWD,EADd,EACcA,OAClB,OAAQ,6BAAST,UAAY,aACxBU,EAED,yBAAKV,UAAY,UACjB,0BAAMA,UAAY,eAAlB,gBAGA,yBAAKA,UAAY,UAETS,EAAON,KAAI,SAAAe,GAAK,OACZ,kBAAC,EAAD,CACDZ,IAAKY,EAAMxB,GACXA,GAAIwB,EAAMxB,GACVC,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAMC,mBACdpB,OAAQmB,EAAMnB,kB,GA1DnBqB,IAAMC,YCMxBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,a","file":"static/js/main.e339962b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css'\r\n\r\nfunction Movie({id, year, title, summary, poster, genres}){\r\n    return (<div className = \"movie\">\r\n            <img src={poster} alt={title} title={title}/>\r\n\r\n        <div className = \"movie__data\">\r\n            <h3 className = \"movie__title\">{title}</h3>\r\n            <h5 className = \"movie__year\">{year}</h5>\r\n            <ul className = \"genres\"> \r\n            {genres.map((genre, index) =>\r\n                <li key ={index} className=\"genres__genre\">\r\n                {genre}\r\n                </li>)}\r\n            </ul>\r\n            <p className = \"movie_summary\">{summary}</p>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nMovie.propTypes ={\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\n\r\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from './Movie';\nimport './App.css';\n\n//yts.lt에서 제공한 API 사용 예정 https://yts.lt/api/v2/list_movies.json\n//yts proxy라는 API를 별도로 사용예정 https://yts-proxy.now.sh/list_movies.json\n\nclass App extends React.Component{      \n\n    //setState를 사용할 때 state안에 default값들을 선언할 필요는 없다.\n    \n    state = {\n        movies: [] ,\n        isLoading: true\n    };\n\n    getMovies = async() =>{ \n        const{\n            data:{\n                data:{\n                    movies\n                }\n            }\n        } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n\n        //시간이 필요하긴 하지만 FETCH 보다느 AXIOS가 시간이 더 빠를수 있음.\n\n        this.setState({movies, isLoading: false});   //this.setState({movies:movies}); 와 같은 뜻\n        \n\n        // 위와 같이 movies.data.data.movies 로 접근하는 것 보다는 위의 방식이 더 나음\n\n        //axios가 다끝날때까지 기다려줘라는 뜻 \n        //async 를 써야 await 이 가능함\n    }\n    componentDidMount() {\n    /*        setTimeout(() => {\n\n            this.setState({isLoading: false});\n        },6000);\n     */\n        this.getMovies();\n        //이 과정에서 fetch를 할 예정\n        //fatch 위의 작은 layer임 (일종의 땅콩위의 초콜릿)\n    \n    }\n    render(){\n        const {isLoading, movies} = this.state;\n        return (<section className = \"container\"> \n            {isLoading \n            ? (\n            <div className = \"loader\">\n            <span className = \"loader_text\">Loading....</span>\n            </div>)\n        : (\n            <div className = \"movies\">\n                {\n                    movies.map(movie => (\n                        <Movie\n                       key={movie.id}\n                       id={movie.id} \n                       year={movie.year} \n                       title={movie.title} \n                       summary={movie.summary} \n                       poster={movie.medium_cover_image}\n                       genres={movie.genres}\n                       />))}\n            </div>\n\n        )}\n            </section>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n/*\n// react 는 app.js 컴포넌트를 root 에 넣으려고 하고 있다.\n// react 는 virtual DOM을 중심으로 작동하고 있음\n// <App /> -> 이것을 component 라고 함 HTML을 반환하는 함수 이다.\n// 컴포넌트는 HTML을 반환하는 함수다.\n// HTML과 Javascript 사이에 나온 것이 Jsx ( react에 특화된 개념)\n// javascript 위에서 배우는 것 JSX\n*/\n\n\nReactDOM.render(<App />,  document.getElementById(\"potato\"));\n\n/*\n//하나의 컴포넌트만 렌더링 가능함 따라서, Potato를 렌더링 하고 싶으면 app.js 조작이 불가피하다. \n// 서버는 별도로 없기때문에 npm start 하고 그상태로 두어야함.\n*/"],"sourceRoot":""}